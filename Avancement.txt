14/02/2022 :
Lecture du polycopié sur l'efficacité des algorithmes en calcul formel -> jusqu'a karatsuba


24/02/2022 :
Nous avons codé l'algorithme de Karatsuba en Python avec d'autres fonctions utilitaires (citées ci-dessous)


02/03/2022 :
On a refait en C ce qu'on avait fait en Python.
C'est a dire : 
- création des fonctions utilitaires pour afficher/générer/libérer/comparer/copier des polynomes
- création de fonction d'opérations sur les polynomes : somme/opposé/produit
- reproduction de l'algorithme de produit de polynomes naif
- reproduction de l'algorithme de produit de polynomes de karatsuba
- création d'un main afin de vérifier nos fonctions en effectuant plusieurs tests


11/03/2022 :
Modifications esthétiques sur nos fonctions
Début de l'algorithme FFT : 
- selection du nombre premier 2013265921 (cela permet entre autre de renvoyer les resultat au modulo ce nombre pour toutes nos fonctions)
- création de modpow() pour calculer un entier à un puissance naif
- création de calc_P() pour évaluer un polynome en une valeur
- création de get_w_i() pour évaluer le produit de deux polynomes en une valeur ????????????????????? A VERIFIER
Optimisation et réorganisation du jeu de test pour ne pas perdre de temps


15/03/2022 :
Optimisation de nos fonctions déjà créées
- création de creer_poly() pour allouer un polynome
- création de horner() afin de calculer plus rapidement l'évaluation d'un polynome en un valeur
// dans calc_poly on calculait en partant du début jusqu'à la fin en utilisant modpow pour chaque rang ce qui prend beaucoup de temps
// maintenant on commence par la fin et on descend en multipliant à chaques tour de boucle par notre valeur 
// afin de ne plus avoir à utiliser modpow -> BEAUCOUP MIEUX
+ suppression de calc_poly maintenant inutile
- suppression de get_w_i car inutile
- création de get_racines() qui renvoi les n premieres puissance d'un entier
- commencement de la fonction d'évaluation d'un polynôme eval()
Nouveau jeu de test pour tester nos fonctions


18/03/2022 :
correction des fonctions add() et sub() plus efficaces.
ajout d'un test de temps pour la fonction eval()

01/04/2022 :
- changement des variables long en unsigned int, lorsqu'on faisait une multiplication
entre deux unsigned int, il se pouvait qu'on dépasse le maximum des unsigned int
-> cast en long pour les multiplications.
- amélioration de la fonction eval() en enlevant les malloc() inutiles dans la fonctions.